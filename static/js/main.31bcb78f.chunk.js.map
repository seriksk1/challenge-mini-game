{"version":3,"sources":["assets/cavalry.png","assets/archer.png","assets/spearman.png","serviceWorker.ts","redux/selectors.ts","redux/constants.ts","redux/actions/game.ts","pages/Home.tsx","redux/services/gameEngine.ts","components/Score.tsx","components/Round.tsx","redux/actions/computer.ts","components/UnitsList.tsx","redux/actions/player.ts","pages/Game.tsx","pages/Results.tsx","App.tsx","redux/actions/app.ts","redux/reducers/app.ts","redux/reducers/game.ts","redux/reducers/player.ts","redux/reducers/computer.ts","redux/reducers/rootReducer.ts","index.tsx","redux/store.ts"],"names":["module","exports","Boolean","window","location","hostname","match","isAppStarted","state","app","started","isGameStarted","game","getWhoSelecting","whoSelecting","getGameRounds","currentRound","getPlayerScore","score","player","getComputerScore","computer","getPlayerUnit","unit","getComputerUnit","ResultsPlayerWin","winner","looser","ResultsComputerWin","ResultsDraw","isDraw","restartGame","type","setWhoSelecting","gameMember","payload","Home","history","useHistory","React","useEffect","onClick","push","units","chance","this","resetChances","setPreferredUnit","forEach","randIndex","Math","floor","random","length","min","max","value","total","reduce","accumulator","item","current","playerUnit","computerUnit","playerScore","computerScore","connect","gameRounds","className","gameEngine","checkGameWinner","mapDispatchToProps","setComputerUnit","startNextRound","distributePoints","results","gameOver","roundResults","checkRoundWinner","getRandomUnit","setPlayerUnit","items","map","key","id","src","image","alt","onStart","Game","whoIsSelecting","cavalryImg","archerImg","pikemanImg","initialize","Results","App","exact","path","component","initialState","reducers","action","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wIAAAA,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,yKCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2D,iBCdtBC,EAAe,SAACC,GAAD,OAAwBA,EAAMC,IAAIC,SAGjDC,EAAgB,SAACH,GAAD,OAAwBA,EAAMI,KAAKF,SACnDG,EAAkB,SAACL,GAAD,OAAwBA,EAAMI,KAAKE,cACrDC,EAAgB,SAACP,GAAD,OAAwBA,EAAMI,KAAKI,cACnDC,EAAiB,SAACT,GAAD,OAAwBA,EAAMI,KAAKM,MAAMC,QAC1DC,EAAmB,SAACZ,GAAD,OAAwBA,EAAMI,KAAKM,MAAMG,UAG5DC,EAAgB,SAACd,GAAD,OAAwBA,EAAMW,OAAOI,MAGrDC,EAAkB,SAAChB,GAAD,OAAwBA,EAAMa,SAASE,MCJzDE,EAAiC,CAC5CC,OALoB,SAMpBC,OALsB,YAOXC,EAAmC,CAC9CF,OARsB,WAStBC,OAVoB,UAYTE,EAA4B,CACvCC,QAAQ,GCKGC,G,MAAiD,iBAAO,CACnEC,KDK0B,kBCMfC,EAAuD,SAACC,GAAD,MAAiC,CACnGF,KDL+B,oBCM/BG,QAASD,IClBIE,MAlBf,WACE,IAAMC,EAAUC,cAUhB,OAJAC,IAAMC,WAAU,cAEb,IAGD,6BACE,4BAAQC,QAVS,WACnBJ,EAAQK,KAAK,WASX,gB,2EC8ES,M,iDAhFLC,MAA2B,CACjC,CAAEX,KHViB,UGUFY,OAAQ,GACzB,CAAEZ,KHZgB,SGYFY,OAAQ,GACxB,CAAEZ,KHdiB,UGcFY,OAAQ,I,8CAG3B,WACEC,KAAKC,eACLD,KAAKE,qB,0BAGP,WACEF,KAAKF,MAAMK,SAAQ,SAACzB,GAAD,OAAWA,EAAKqB,OAAS,S,8BAG9C,WACE,IAAMK,EAAYC,KAAKC,MAAMD,KAAKE,SAAWP,KAAKF,MAAMU,QACxDR,KAAKF,MAAMM,GAAWL,OAAS,K,sBAGjC,WACE,OAAOC,KAAKF,Q,2BAGd,WACE,IAAcW,EAAaC,EAAaC,EAD1B,EAGRC,EAAQZ,KAAKF,MAAMe,QAAO,SAACC,EAAqBC,GAAtB,OAAiDD,EAAeC,EAAKhB,SAAS,GACxGA,GAHQU,EAGM,EAHOC,EAGJE,GAHoC,GAAnBD,EAGVN,KAAKE,WAHqCE,EAAME,EAAQD,GAKlFM,EAAU,EANA,cAOKhB,KAAKF,OAPV,IAOd,2BAA+B,CAAC,IAArBiB,EAAoB,QAC7B,GAAIC,GAAWjB,GAAUA,EAASiB,EAAUD,EAAKhB,OAC/C,OAAOgB,EAAK5B,KAEd6B,GAAWD,EAAKhB,QAXJ,8BAed,MAAO,Y,8BAGT,SAAiBkB,EAAsBC,GACrC,GHrDkB,WGqDdD,EAAuB,CACzB,GHrDiB,YGqDbC,EACF,OAAOtC,EACF,GHzDU,YGyDNsC,EACT,OAAOnC,EACF,GH1DS,WG0DLmC,EACT,OAAOlC,OAEJ,GH9DY,YG8DRiC,EAAwB,CACjC,GH9DgB,WG8DZC,EACF,OAAOtC,EACF,GH/DU,YG+DNsC,EACT,OAAOnC,EACF,GHnEU,YGmENmC,EACT,OAAOlC,OAEJ,GHpEY,YGoERiC,EAAwB,CACjC,GHvEiB,YGuEbC,EACF,OAAOtC,EACF,GHxES,WGwELsC,EACT,OAAOnC,EACF,GHzEU,YGyENmC,EACT,OAAOlC,EAGX,MAAO,K,6BAGT,SAAgBmC,EAAqBC,GACnC,OAAID,EAAcC,EH/EA,SGiFPA,EAAgBD,EHhFP,WACJ,W,MIkCLE,eAXgB,SAAC1D,GAC9B,MAAO,CACLE,QAASC,EAAcH,GACvByD,cAAe7C,EAAiBZ,GAChCwD,YAAa/C,EAAeT,GAC5B2D,WAAYpD,EAAcP,MAII,GAEnB0D,EA7BU,SAAC,GAAyD,IAAvDxD,EAAsD,EAAtDA,QAASsD,EAA6C,EAA7CA,YAAaC,EAAgC,EAAhCA,cAAeE,EAAiB,EAAjBA,WAC/D,OACE,oCACE,wBAAIC,UAAU,UAAd,SAA8BD,GAC9B,yBAAKC,UAAU,SACb,qCACA,4BACGJ,EADH,IACiBC,GAEjB,wCAEAvD,EAEE,KADF,yBAAK0D,UAAU,eAAf,WAAsCC,EAAWC,gBAAgBN,EAAaC,QCwDzEM,EAAqB,CAChCC,gBC9EoE,SAACxC,GAAD,MAAqB,CACzFA,KNsC+B,oBMrC/BG,QAASH,ID6ETC,kBACAwC,eJpDiE,iBAAO,CACxEzC,KDF8B,qBKsD9B0C,iBJ5CoE,SAACC,GAAD,MAA4B,CAChG3C,KDT+B,oBCU/BG,QAASwC,II2CTC,SJ1DsD,iBAAO,CAC7D5C,KDAuB,eK4DVkC,eAhBgB,SAAC1D,GAC9B,MAAO,CACLuD,aAAcvC,EAAgBhB,GAC9BsD,WAAYxC,EAAcd,GAC1B2D,WAAYpD,EAAcP,MAYU+D,EAAzBL,EAjEU,SAAC,GAUnB,IATLC,EASI,EATJA,WACAL,EAQI,EARJA,WACAC,EAOI,EAPJA,aACAM,EAMI,EANJA,WACAG,EAKI,EALJA,gBACAC,EAII,EAJJA,eACAxC,EAGI,EAHJA,gBACAyC,EAEI,EAFJA,iBACAE,EACI,EADJA,SAEMC,EAAeR,EAAWS,iBAAiBhB,EAAYC,GAoB7D,OAJAxB,IAAMC,WAAU,WACdgC,EAAgBH,EAAWU,mBAC1B,CAACP,IAGF,yBAAKJ,UAAU,mBACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,cACb,uBAAGA,UAAU,aAAb,WAAkCN,IAEpC,yBAAKM,UAAU,cACb,uBAAGA,UAAU,aAAb,aAAoCL,KAGxC,yBAAKK,UAAU,iBAAf,iBAA8CS,EAAa/C,OAAS,OAAS+C,EAAanD,QAC1F,4BAAQ0C,UAAU,iBAAiB3B,QA7BV,WACtBoC,EAAa/C,QAChB4C,EAAiBG,GAGnBJ,IAEIN,EAAa,EAAI,GACnBlC,ELvCgB,UKyChB2C,MAoBG,cE1BIL,EAAqB,CAChCS,cCtCgE,SAAChD,GAAD,MAAqB,CACrFA,KRiC6B,kBQhC7BG,QAASH,IDqCTC,mBAGaiC,eATgB,SAAC1D,GAC9B,MAAO,KAQ+B+D,EAAzBL,EA/Bc,SAAC,GAA+C,IAA7Ce,EAA4C,EAA5CA,MAAOD,EAAqC,EAArCA,cAAe/C,EAAsB,EAAtBA,gBAMpD,OACE,wBAAImC,UAAU,cACM,IAAjBa,EAAM5B,OACH4B,EAAMC,KAAI,SAACtB,GACT,OACE,wBAAIuB,IAAKvB,EAAKwB,GAAIhB,UAAU,mBAC1B,uBAAGA,UAAU,aAAaR,EAAK5B,MAC/B,yBAAKS,QAAS,kBAZFT,EAYyB4B,EAAK5B,KAXtDgD,EAAchD,QACdC,EPXoB,YOSG,IAACD,GAYqCoC,UAAU,aAAaiB,IAAKzB,EAAK0B,MAAOC,IAAI,SAInG,SEoCGhB,EAAqB,CAChCiB,QRjD8D,iBAAO,CACrExD,KDOwB,eS0CxBD,eAGa0D,EADFvB,aAXkB,SAAC1D,GAC9B,MAAO,CACLE,QAASC,EAAcH,GACvBkF,eAAgB7E,EAAgBL,MAQE+D,EAAzBL,EAhDsB,SAAC,GAAuD,IAArDxD,EAAoD,EAApDA,QAASgF,EAA2C,EAA3CA,eAAgBF,EAA2B,EAA3BA,QAASzD,EAAkB,EAAlBA,YAChEY,EAAiB,CACrB,CAAEyC,GAAI,EAAGpD,KTxBU,USwBKsD,MAAOK,KAC/B,CAAEP,GAAI,EAAGpD,KTxBS,SSwBKsD,MAAOM,KAC9B,CAAER,GAAI,EAAGpD,KTxBU,USwBKsD,MAAOO,MAajC,OALAtD,IAAMC,WAAU,WACd6B,EAAWyB,aACXN,MACC,CAACA,IAGF,6BACE,kBAAC,EAAD,MAEC9E,GTvCe,WSuCJgF,EACV,oCACE,uBAAGtB,UAAU,SAAb,eACA,kBAAC,EAAD,CAAWa,MAAOtC,KAElBjC,GT3Cc,aS2CHgF,EACb,kBAAC,EAAD,CAAOrB,WAAYA,IACjB,KAEJ,4BAAQ5B,QAvBc,WACxB4B,EAAWyB,aACX/D,KAqBsCqC,UAAU,eAA9C,eClDS2B,MAJf,WACE,OAAO,yCCuCIxB,EAAqB,CAChCiB,QCvC4D,iBAAO,CACnExD,KZqBuB,eWqBVgE,EADH9B,aAVmB,SAAC1D,GAC9B,MAAO,CACLE,QAASH,EAAaC,MAQW+D,EAAzBL,EA9B4B,SAAC,GAA0B,IAAxBxD,EAAuB,EAAvBA,QAAS8E,EAAc,EAAdA,QAKlD,OAJAjD,aAAgB,WACdiD,MACC,CAACA,IAEC9E,EAKH,uBAAK0D,UAAU,OACb,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAO6B,OAAK,EAACC,KAAK,IAAIC,UAAW/D,IACjC,gBAAC,IAAD,CAAO6D,OAAK,EAACC,KAAK,QAAQC,UAAWV,IACrC,gBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,WAAWC,UAAWJ,MARrC,wBAAM3B,UAAU,WAAhB,iB,uBEjBEgC,EAA0B,CACrC1F,SAAS,G,YCQE0F,EAA2B,CACtC1F,SAAS,EACTM,aAAc,EACdF,adToB,ScUpBI,MAAO,CACLC,OAAQ,EACRE,SAAU,ICdP,IAAM+E,EAA6B,CACxC7E,KAAM,MCDD,IAAM6E,EAA+B,CAC1C7E,KAAM,MCKD,IAAM8E,EAAW,CACtB5F,IJJa,WAAmF,IAA/DD,EAA8D,uDAA3C4F,EAAcE,EAA6B,uCAC/F,OAAQA,EAAOtE,MACb,IbeqB,YadnB,OAAO,2BACFxB,GADL,IAEEE,SAAS,IAGb,QACE,OAAOF,IIJXI,KHUa,WAAsF,IAAjEJ,EAAgE,uDAA5C4F,EAAcE,EAA8B,uCAClG,OAAQA,EAAOtE,MACb,IdIsB,acHpB,OAAO,2BACFxB,GADL,IAEEE,SAAS,IAGb,IdAwB,ecCtB,OAAO,uCACFF,GACA4F,GAFL,IAGE1F,SAAS,IAGb,IdRqB,YcSnB,OAAO,2BACFF,GADL,IAEEE,SAAS,IAGb,IdZ4B,mBca1B,OAAO,2BACFF,GADL,IAEEQ,aAAcR,EAAMQ,aAAe,IAGvC,IdjB6B,oBckB3B,OAAO,2BACFR,GADL,IAEEM,aAAcwF,EAAOnE,UAGzB,IdtB6B,oBcsBJ,IAAD,EAChBT,EAAyB4E,EAAOnE,QAAQT,OACxCC,EAAyB2E,EAAOnE,QAAQR,OAE9C,OAAO,2BACFnB,GADL,IAEEU,MAAM,2BACDV,EAAMU,OADN,uBAEFQ,EAASlB,EAAMU,MAAMQ,GAAU,GAF7B,cAGFC,EAAiC,IAAxBnB,EAAMU,MAAMS,GAAgBnB,EAAMU,MAAMS,GAAU,EAAI,GAH7D,MAQT,QACE,OAAOnB,IGzDXW,OFLa,WAA4F,IAArEX,EAAoE,uDAA9C4F,EAAcE,EAAgC,uCACxG,OAAQA,EAAOtE,MACb,If4B2B,kBe3BzB,OAAO,2BACFxB,GADL,IAEEe,KAAM+E,EAAOnE,UAGjB,QACE,OAAO3B,IEHXa,SDNa,WAAkG,IAAzEb,EAAwE,uDAAhD4F,EAAcE,EAAkC,uCAC9G,OAAQA,EAAOtE,MACb,IhBiC6B,oBgBhC3B,OAAO,2BACFxB,GADL,IAEEe,KAAM+E,EAAOnE,UAGjB,QACE,OAAO3B,KCEE+F,EAFKC,0BAA6BH,GCTjD,IAAMI,GCFUC,sBAAYH,EAAaI,8BAAoBC,8BDI7DC,IAASC,OACP,kBAAC,IAAD,CAAQC,SAAS,wBACf,kBAAC,IAAD,CAAUN,MAAOA,IACf,kBAAC,EAAD,QAGJO,SAASC,eAAe,SpB6GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.31bcb78f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cavalry.643df87e.png\";","module.exports = __webpack_public_path__ + \"static/media/archer.be2c31a1.png\";","module.exports = __webpack_public_path__ + \"static/media/spearman.f2f50535.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import { RootReducer } from './reducers/rootReducer';\n\n// For app reducer\nexport const isAppStarted = (state: RootReducer) => state.app.started;\n\n// For game reducer\nexport const isGameStarted = (state: RootReducer) => state.game.started;\nexport const getWhoSelecting = (state: RootReducer) => state.game.whoSelecting;\nexport const getGameRounds = (state: RootReducer) => state.game.currentRound;\nexport const getPlayerScore = (state: RootReducer) => state.game.score.player;\nexport const getComputerScore = (state: RootReducer) => state.game.score.computer;\n\n// For player reducer\nexport const getPlayerUnit = (state: RootReducer) => state.player.unit;\n\n// For computer reducer\nexport const getComputerUnit = (state: RootReducer) => state.computer.unit;\n","// general constants\n\nimport { IGameResults } from './interfaces';\n\nexport const Cavalry = 'Cavalry';\nexport const Archer = 'Archer';\nexport const Pikeman = 'Pikeman';\n\nexport const Player = 'player';\nexport const Computer = 'computer';\nexport const Draw = 'draw';\n\nexport const ResultsPlayerWin: IGameResults = {\n  winner: Player,\n  looser: Computer,\n};\nexport const ResultsComputerWin: IGameResults = {\n  winner: Computer,\n  looser: Player,\n};\nexport const ResultsDraw: IGameResults = {\n  isDraw: true,\n};\n\n// For app reducer\n\nexport const APP_START = 'APP_START';\n\n// For game reducer\n\nexport const GAME_START = 'GAME_START';\nexport const GAME_OVER = 'GAME_OVER';\nexport const GAME_RESTART = 'GAME_RESTART';\nexport const START_NEXT_ROUND = 'START_NEXT_ROUND';\nexport const SET_WHO_SELECTING = 'SET_WHO_SELECTING';\nexport const DISTRIBUTE_POINTS = 'DISTRIBUTE_POINTS';\n\n// For player reducer\n\nexport const PLAYER_WON_ROUND = 'PLAYER_WON_ROUND';\nexport const SET_PLAYER_UNIT = 'SET_PLAYER_UNIT';\n\n// For computer reducer\n\nexport const COMPUTER_WON_ROUND = 'COMPUTER_WON_ROUND';\nexport const SET_COMPUTER_UNIT = 'SET_COMPUTER_UNIT';\n","import { ActionCreator } from 'redux';\n\nimport {\n  IGameResults,\n  IGameOverAction,\n  IGameStartAction,\n  IGameRestartAction,\n  IGameStartNextAction,\n  IGameSetWhoSelecting,\n  IGameDistributePoints,\n} from '../interfaces';\n\nimport {\n  GAME_OVER,\n  GAME_START,\n  GAME_RESTART,\n  START_NEXT_ROUND,\n  SET_WHO_SELECTING,\n  DISTRIBUTE_POINTS,\n} from '../constants';\nimport { GameMemberType } from '../types';\n\nexport const startGameAction: ActionCreator<IGameStartAction> = () => ({\n  type: GAME_START,\n});\n\nexport const restartGame: ActionCreator<IGameRestartAction> = () => ({\n  type: GAME_RESTART,\n});\n\nexport const gameOver: ActionCreator<IGameOverAction> = () => ({\n  type: GAME_OVER,\n});\n\nexport const startNextRound: ActionCreator<IGameStartNextAction> = () => ({\n  type: START_NEXT_ROUND,\n});\n\nexport const setWhoSelecting: ActionCreator<IGameSetWhoSelecting> = (gameMember: GameMemberType) => ({\n  type: SET_WHO_SELECTING,\n  payload: gameMember,\n});\n\nexport const distributePoints: ActionCreator<IGameDistributePoints> = (results: IGameResults) => ({\n  type: DISTRIBUTE_POINTS,\n  payload: results,\n});\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { restartGame } from '../redux/actions/game';\n\nfunction Home() {\n  const history = useHistory();\n\n  const handleToGame = () => {\n    history.push('/game');\n  };\n\n  React.useEffect(() => {\n    restartGame();\n  }, []);\n\n  return (\n    <div>\n      <button onClick={handleToGame}>Start game</button>\n    </div>\n  );\n}\n\nexport default Home;\n","import {\n  Archer,\n  Cavalry,\n  Pikeman,\n  Player,\n  Computer,\n  Draw,\n  ResultsPlayerWin,\n  ResultsComputerWin,\n  ResultsDraw,\n} from '../constants';\nimport { IGameEngine, IUnitWithChance } from '../interfaces';\nimport { UnitType } from '../types';\n\nclass GameEngine implements IGameEngine {\n  private units: IUnitWithChance[] = [\n    { type: Pikeman, chance: 0 },\n    { type: Archer, chance: 0 },\n    { type: Cavalry, chance: 0 },\n  ];\n\n  initialize() {\n    this.resetChances();\n    this.setPreferredUnit();\n  }\n\n  resetChances() {\n    this.units.forEach((unit) => (unit.chance = 0.25));\n  }\n\n  setPreferredUnit() {\n    const randIndex = Math.floor(Math.random() * this.units.length);\n    this.units[randIndex].chance = 0.5;\n  }\n\n  getUnits() {\n    return this.units;\n  }\n\n  getRandomUnit() {\n    const lerp = (min: number, max: number, value: number) => (1 - value) * min + value * max;\n\n    const total = this.units.reduce((accumulator: number, item: IUnitWithChance) => (accumulator += item.chance), 0);\n    const chance = lerp(0, total, Math.random());\n\n    let current = 0;\n    for (const item of this.units) {\n      if (current <= chance && chance < current + item.chance) {\n        return item.type;\n      }\n      current += item.chance;\n    }\n\n    // if Error\n    return 'Cavalry';\n  }\n\n  checkRoundWinner(playerUnit: UnitType, computerUnit: UnitType) {\n    if (playerUnit === Archer) {\n      if (computerUnit === Pikeman) {\n        return ResultsPlayerWin;\n      } else if (computerUnit === Cavalry) {\n        return ResultsComputerWin;\n      } else if (computerUnit === Archer) {\n        return ResultsDraw;\n      }\n    } else if (playerUnit === Cavalry) {\n      if (computerUnit === Archer) {\n        return ResultsPlayerWin;\n      } else if (computerUnit === Pikeman) {\n        return ResultsComputerWin;\n      } else if (computerUnit === Cavalry) {\n        return ResultsDraw;\n      }\n    } else if (playerUnit === Pikeman) {\n      if (computerUnit === Cavalry) {\n        return ResultsPlayerWin;\n      } else if (computerUnit === Archer) {\n        return ResultsComputerWin;\n      } else if (computerUnit === Pikeman) {\n        return ResultsDraw;\n      }\n    }\n    return {};\n  }\n\n  checkGameWinner(playerScore: number, computerScore: number) {\n    if (playerScore > computerScore) {\n      return Player;\n    } else if (computerScore > playerScore) {\n      return Computer;\n    } else return Draw;\n  }\n}\n\nexport default new GameEngine();\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\n\nimport { RootReducer } from '../redux/reducers/rootReducer';\nimport { getComputerScore, getGameRounds, getPlayerScore, isGameStarted } from '../redux/selectors';\n\nimport gameEngine from '../redux/services/gameEngine';\n\ninterface Props {\n  playerScore: number;\n  computerScore: number;\n  started: boolean;\n  gameRounds: number;\n}\n\nconst Score: FC<Props> = ({ started, playerScore, computerScore, gameRounds }) => {\n  return (\n    <>\n      <h1 className=\"rounds\">Round {gameRounds}</h1>\n      <div className=\"score\">\n        <p>Player</p>\n        <h1>\n          {playerScore}:{computerScore}\n        </h1>\n        <p>Computer</p>\n      </div>\n      {!started ? (\n        <div className=\"game-winner\">Winner: {gameEngine.checkGameWinner(playerScore, computerScore)}</div>\n      ) : null}\n    </>\n  );\n};\n\nexport const mapStateToProps = (state: RootReducer) => {\n  return {\n    started: isGameStarted(state),\n    computerScore: getComputerScore(state),\n    playerScore: getPlayerScore(state),\n    gameRounds: getGameRounds(state),\n  };\n};\n\nexport const mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Score);\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\n\nimport { getComputerUnit, getGameRounds, getPlayerUnit } from '../redux/selectors';\nimport { setWhoSelecting, startNextRound, distributePoints, gameOver } from '../redux/actions/game';\n\nimport { GameMemberType, UnitType } from '../redux/types';\nimport { Player } from '../redux/constants';\n\nimport { RootReducer } from '../redux/reducers/rootReducer';\nimport { setComputerUnit } from '../redux/actions/computer';\n\nimport { IGameResults, IGameEngine } from '../redux/interfaces';\n\ninterface Props {\n  gameRounds: number;\n  gameEngine: IGameEngine;\n  playerUnit: UnitType;\n  computerUnit: UnitType;\n  setComputerUnit: (unit: UnitType) => void;\n  startNextRound: () => void;\n  setWhoSelecting: (gameMember: GameMemberType) => void;\n  distributePoints: (results: IGameResults) => void;\n  gameOver: () => void;\n}\n\nconst Round: FC<Props> = ({\n  gameRounds,\n  playerUnit,\n  computerUnit,\n  gameEngine,\n  setComputerUnit,\n  startNextRound,\n  setWhoSelecting,\n  distributePoints,\n  gameOver,\n}) => {\n  const roundResults = gameEngine.checkRoundWinner(playerUnit, computerUnit);\n\n  const handleStartNextRound = () => {\n    if (!roundResults.isDraw) {\n      distributePoints(roundResults);\n    }\n\n    startNextRound();\n\n    if (gameRounds + 1 < 20) {\n      setWhoSelecting(Player);\n    } else {\n      gameOver();\n    }\n  };\n\n  React.useEffect(() => {\n    setComputerUnit(gameEngine.getRandomUnit());\n  }, [setComputerUnit]);\n\n  return (\n    <div className=\"round-container\">\n      <div className=\"round-units\">\n        <div className=\"round-unit\">\n          <p className=\"unit-type\">Player: {playerUnit}</p>\n        </div>\n        <div className=\"round-unit\">\n          <p className=\"unit-type\">Computer: {computerUnit}</p>\n        </div>\n      </div>\n      <div className=\"round-results\">Round winner: {roundResults.isDraw ? 'Draw' : roundResults.winner}</div>\n      <button className=\"btn-next-round\" onClick={handleStartNextRound}>\n        {'-->'}\n      </button>\n    </div>\n  );\n};\n\nexport const mapStateToProps = (state: RootReducer) => {\n  return {\n    computerUnit: getComputerUnit(state),\n    playerUnit: getPlayerUnit(state),\n    gameRounds: getGameRounds(state),\n  };\n};\n\nexport const mapDispatchToProps = {\n  setComputerUnit,\n  setWhoSelecting,\n  startNextRound,\n  distributePoints,\n  gameOver,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Round);\n","import { ActionCreator } from 'redux';\n\nimport { SET_COMPUTER_UNIT } from '../constants';\nimport { IComputerSetUnitAction } from '../interfaces';\nimport { UnitType } from '../types';\n\nexport const setComputerUnit: ActionCreator<IComputerSetUnitAction> = (type: UnitType) => ({\n  type: SET_COMPUTER_UNIT,\n  payload: type,\n});\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\n\nimport { RootReducer } from '../redux/reducers/rootReducer';\nimport { setPlayerUnit } from '../redux/actions/player';\n\nimport { IUnit } from '../redux/interfaces';\nimport { GameMemberType, UnitType } from '../redux/types';\nimport { setWhoSelecting } from '../redux/actions/game';\nimport { Computer } from '../redux/constants';\n\ninterface Props {\n  items: IUnit[];\n  setPlayerUnit: (type: UnitType) => void;\n  setWhoSelecting: (gameMember: GameMemberType) => void;\n}\n\nconst UnitsList: FC<Props> = ({ items, setPlayerUnit, setWhoSelecting }) => {\n  const handleUnitSelect = (type: UnitType) => {\n    setPlayerUnit(type);\n    setWhoSelecting(Computer);\n  };\n\n  return (\n    <ul className=\"units-list\">\n      {items.length !== 0\n        ? items.map((item) => {\n            return (\n              <li key={item.id} className=\"units-list-item\">\n                <p className=\"unit-type\">{item.type}</p>\n                <img onClick={() => handleUnitSelect(item.type)} className=\"unit-image\" src={item.image} alt=\"\" />\n              </li>\n            );\n          })\n        : null}\n    </ul>\n  );\n};\n\nexport const mapStateToProps = (state: RootReducer) => {\n  return {};\n};\n\nexport const mapDispatchToProps = {\n  setPlayerUnit,\n  setWhoSelecting,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UnitsList);\n","import { ActionCreator } from 'redux';\n\nimport { IPlayerSetUnitAction } from '../interfaces';\nimport { UnitType } from '../types';\nimport { SET_PLAYER_UNIT } from '../constants';\n\nexport const setPlayerUnit: ActionCreator<IPlayerSetUnitAction> = (type: UnitType) => ({\n  type: SET_PLAYER_UNIT,\n  payload: type,\n});\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\n\nimport cavalryImg from '../assets/cavalry.png';\nimport archerImg from '../assets/archer.png';\nimport pikemanImg from '../assets/spearman.png';\n\nimport { RootReducer } from '../redux/reducers/rootReducer';\nimport { startGameAction, restartGame } from '../redux/actions/game';\nimport { getWhoSelecting, isGameStarted } from '../redux/selectors';\n\nimport { IUnit } from '../redux/interfaces';\nimport { GameMemberType } from '../redux/types';\nimport { Cavalry, Archer, Pikeman, Player, Computer } from '../redux/constants';\n\nimport { Score, Round, UnitsList } from '../components';\nimport gameEngine from '../redux/services/gameEngine';\n\nexport interface Props {\n  started: boolean;\n  whoIsSelecting: GameMemberType;\n\n  onStart: () => void;\n  restartGame: () => void;\n}\n\nexport const GameRoot: FC<Props> = ({ started, whoIsSelecting, onStart, restartGame }) => {\n  const units: IUnit[] = [\n    { id: 0, type: Cavalry, image: cavalryImg },\n    { id: 1, type: Archer, image: archerImg },\n    { id: 2, type: Pikeman, image: pikemanImg },\n  ];\n\n  const handleRestartGame = () => {\n    gameEngine.initialize();\n    restartGame();\n  };\n\n  React.useEffect(() => {\n    gameEngine.initialize();\n    onStart();\n  }, [onStart]);\n\n  return (\n    <div>\n      <Score />\n\n      {started && whoIsSelecting === Player ? (\n        <>\n          <p className=\"title\">Choose unit</p>\n          <UnitsList items={units} />\n        </>\n      ) : started && whoIsSelecting === Computer ? (\n        <Round gameEngine={gameEngine} />\n      ) : null}\n\n      <button onClick={handleRestartGame} className=\"btn-restart\">\n        Restart\n      </button>\n    </div>\n  );\n};\n\nexport const mapStateToProps = (state: RootReducer) => {\n  return {\n    started: isGameStarted(state),\n    whoIsSelecting: getWhoSelecting(state),\n  };\n};\n\nexport const mapDispatchToProps = {\n  onStart: startGameAction,\n  restartGame,\n};\nconst Game = connect(mapStateToProps, mapDispatchToProps)(GameRoot);\nexport default Game;\n","import React from 'react';\n\nfunction Results() {\n  return <div>Results</div>;\n}\n\nexport default Results;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Switch, Route } from 'react-router-dom';\n\nimport { isAppStarted } from './redux/selectors';\nimport { appStartAction } from './redux/actions/app';\n\nimport './App.css';\nimport { RootReducer } from './redux/reducers/rootReducer';\nimport { Home, Game, Results } from './pages';\n\nexport interface Props {\n  started: boolean;\n  onStart: () => void;\n}\n\nexport const AppRoot: React.FC<Props> = ({ started, onStart }) => {\n  React.useEffect(() => {\n    onStart();\n  }, [onStart]);\n\n  if (!started) {\n    return <span className=\"loading\">Loading...</span>;\n  }\n\n  return (\n    <div className=\"app\">\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/game\" component={Game} />\n        <Route exact path=\"/results\" component={Results} />\n      </Switch>\n    </div>\n  );\n};\n\nexport const mapStateToProps = (state: RootReducer) => {\n  return {\n    started: isAppStarted(state),\n  };\n};\n\nexport const mapDispatchToProps = {\n  onStart: appStartAction,\n};\n\nconst App = connect(mapStateToProps, mapDispatchToProps)(AppRoot);\nexport default App;\n","import { ActionCreator } from 'redux';\nimport { IAppStartAction } from '../interfaces';\nimport { APP_START } from '../constants';\n\nexport const appStartAction: ActionCreator<IAppStartAction> = () => ({\n  type: APP_START,\n});\n","import { Action } from 'redux';\nimport { AppActions } from '../types';\nimport { IAppState } from '../interfaces';\nimport { APP_START } from '../constants';\n\nexport const initialState: IAppState = {\n  started: false,\n};\n\nexport default function appReducer(state: IAppState = initialState, action: AppActions | Action) {\n  switch (action.type) {\n    case APP_START:\n      return {\n        ...state,\n        started: true,\n      };\n\n    default:\n      return state;\n  }\n}\n","import { Action } from 'redux';\n\nimport { GameActions, GameMemberType } from '../types';\nimport { IGameState } from '../interfaces';\nimport {\n  Player,\n  GAME_OVER,\n  GAME_START,\n  GAME_RESTART,\n  START_NEXT_ROUND,\n  SET_WHO_SELECTING,\n  DISTRIBUTE_POINTS,\n} from '../constants';\n\nexport const initialState: IGameState = {\n  started: false,\n  currentRound: 1,\n  whoSelecting: Player,\n  score: {\n    player: 0,\n    computer: 0,\n  },\n};\n\nexport default function gameReducer(state: IGameState = initialState, action: GameActions | Action) {\n  switch (action.type) {\n    case GAME_START:\n      return {\n        ...state,\n        started: true,\n      };\n\n    case GAME_RESTART:\n      return {\n        ...state,\n        ...initialState,\n        started: true,\n      };\n\n    case GAME_OVER:\n      return {\n        ...state,\n        started: false,\n      };\n\n    case START_NEXT_ROUND:\n      return {\n        ...state,\n        currentRound: state.currentRound + 1,\n      };\n\n    case SET_WHO_SELECTING:\n      return {\n        ...state,\n        whoSelecting: action.payload,\n      };\n\n    case DISTRIBUTE_POINTS: {\n      const winner: GameMemberType = action.payload.winner;\n      const looser: GameMemberType = action.payload.looser;\n\n      return {\n        ...state,\n        score: {\n          ...state.score,\n          [winner]: state.score[winner] + 1,\n          [looser]: state.score[looser] !== 0 ? state.score[looser] - 1 : 0,\n        },\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n","import { Action } from 'redux';\n\nimport { PlayerActions } from '../types';\nimport { IPlayerState } from '../interfaces';\nimport { SET_PLAYER_UNIT } from '../constants';\n\nexport const initialState: IPlayerState = {\n  unit: null,\n};\n\nexport default function playerReducer(state: IPlayerState = initialState, action: PlayerActions | Action) {\n  switch (action.type) {\n    case SET_PLAYER_UNIT:\n      return {\n        ...state,\n        unit: action.payload,\n      };\n\n    default:\n      return state;\n  }\n}\n","import { Action } from 'redux';\n\nimport { ComputerActions } from '../types';\nimport { IComputerState } from '../interfaces';\nimport { SET_COMPUTER_UNIT } from '../constants';\n\nexport const initialState: IComputerState = {\n  unit: null,\n};\n\nexport default function computerReducer(state: IComputerState = initialState, action: ComputerActions | Action) {\n  switch (action.type) {\n    case SET_COMPUTER_UNIT:\n      return {\n        ...state,\n        unit: action.payload,\n      };\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\n\nimport { IAppState, IComputerState, IGameState, IPlayerState } from '../interfaces';\nimport { gameReducer, appReducer, playerReducer, computerReducer } from './';\n\nexport interface RootReducer {\n  app: IAppState;\n  game: IGameState;\n  player: IPlayerState;\n  computer: IComputerState;\n}\n\nexport const reducers = {\n  app: appReducer,\n  game: gameReducer,\n  player: playerReducer,\n  computer: computerReducer,\n};\n\nconst rootReducer = combineReducers<RootReducer>(reducers);\n\nexport default rootReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\nimport App from './App';\nimport getStore from './redux/store';\n\nconst store = getStore();\n\nReactDOM.render(\n  <Router basename=\"/challenge-mini-game\">\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { applyMiddleware, createStore, Store } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport rootReducer, { RootReducer } from './reducers/rootReducer';\n\nexport type ReduxStore = Store<RootReducer>;\n\nexport default function getStore(): ReduxStore {\n  const store = createStore(rootReducer, composeWithDevTools(applyMiddleware()));\n  return store;\n}\n"],"sourceRoot":""}