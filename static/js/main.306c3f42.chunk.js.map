{"version":3,"sources":["assets/cavalry.png","assets/archer.png","assets/spearman.png","serviceWorker.ts","redux/selectors.ts","redux/actions/game.ts","redux/constants.ts","pages/Home.tsx","redux/services/gameEngine.ts","components/Score.tsx","components/Round.tsx","redux/actions/computer.ts","components/UnitsList.tsx","redux/actions/player.ts","pages/Game.tsx","pages/Results.tsx","App.tsx","redux/actions/app.ts","redux/reducers/app.ts","redux/reducers/game.ts","redux/reducers/player.ts","redux/reducers/computer.ts","redux/reducers/rootReducer.ts","index.tsx","redux/store.ts"],"names":["module","exports","Boolean","window","location","hostname","match","isAppStarted","state","app","started","isGameStarted","game","getWhoSelecting","whoSelecting","getGameRounds","currentRound","getPlayerScore","playerScore","getComputerScore","computerScore","getPlayerUnit","player","unit","getComputerUnit","computer","restartGame","type","setWhoSelecting","gameMember","payload","Home","history","useHistory","React","useEffect","onClick","push","gameEngine","units","getRandomUnit","randIndex","Math","floor","random","this","length","checkRoundWinner","playerUnit","computerUnit","checkGameWinner","connect","className","mapDispatchToProps","setComputerUnit","startNextRound","addPointToPlayer","points","addPointToComputer","gameOver","gameRounds","roundWinner","addPointTo","setPlayerUnit","items","map","item","key","id","src","image","alt","onStart","whoIsSelecting","cavalryImg","archerImg","pikemanImg","Results","App","exact","path","component","Game","initialState","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.306c3f42.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cavalry.643df87e.png\";","module.exports = __webpack_public_path__ + \"static/media/archer.be2c31a1.png\";","module.exports = __webpack_public_path__ + \"static/media/spearman.f2f50535.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import { RootReducer } from './reducers/rootReducer';\n\n// For app reducer\nexport const isAppStarted = (state: RootReducer) => state.app.started;\n\n// For game reducer\nexport const isGameStarted = (state: RootReducer) => state.game.started;\nexport const getWhoSelecting = (state: RootReducer) => state.game.whoSelecting;\nexport const getGameRounds = (state: RootReducer) => state.game.currentRound;\nexport const getPlayerScore = (state: RootReducer) => state.game.playerScore;\nexport const getComputerScore = (state: RootReducer) => state.game.computerScore;\n\n// For player reducer\nexport const getPlayerUnit = (state: RootReducer) => state.player.unit;\n\n// For computer reducer\nexport const getComputerUnit = (state: RootReducer) => state.computer.unit;\n","import { ActionCreator } from 'redux';\n\nimport {\n  IGameStartAction,\n  IComputerWonRoundAction,\n  IGameStartNextAction,\n  IGameAddPointToPlayer,\n  IGameAddPointToComputer,\n  IGameOverAction,\n  IGameRestartAction,\n} from '../interfaces';\n\nimport {\n  GAME_START,\n  START_NEXT_ROUND,\n  SET_WHO_SELECTING,\n  ADD_POINT_TO_PLAYER,\n  ADD_POINT_TO_COMPUTER,\n  GAME_OVER,\n  GAME_RESTART,\n} from '../constants';\nimport { GameMemberType } from '../types';\n\nexport const startGameAction: ActionCreator<IGameStartAction> = () => ({\n  type: GAME_START,\n});\n\nexport const gameOver: ActionCreator<IGameOverAction> = () => ({\n  type: GAME_OVER,\n});\n\nexport const restartGame: ActionCreator<IGameRestartAction> = () => ({\n  type: GAME_RESTART,\n});\n\nexport const addPointToPlayer: ActionCreator<IGameAddPointToPlayer> = (points: number) => ({\n  type: ADD_POINT_TO_PLAYER,\n  payload: points,\n});\n\nexport const addPointToComputer: ActionCreator<IGameAddPointToComputer> = (points: number) => ({\n  type: ADD_POINT_TO_COMPUTER,\n  payload: points,\n});\n\nexport const setWhoSelecting: ActionCreator<IComputerWonRoundAction> = (gameMember: GameMemberType) => ({\n  type: SET_WHO_SELECTING,\n  payload: gameMember,\n});\n\nexport const startNextRound: ActionCreator<IGameStartNextAction> = () => ({\n  type: START_NEXT_ROUND,\n});\n","// general constants\n\nexport const Cavalry = 'Cavalry';\nexport const Archer = 'Archer';\nexport const Pikeman = 'Pikeman';\nexport const UnitTypes = [Cavalry, Archer, Pikeman];\n\nexport const Player = 'Player';\nexport const Computer = 'Computer';\nexport const Draw = 'Draw';\n\n// For app reducer\n\nexport const APP_START = 'APP_START';\n\n// For game reducer\n\nexport const GAME_START = 'GAME_START';\nexport const GAME_OVER = 'GAME_OVER';\nexport const GAME_RESTART = 'GAME_RESTART';\nexport const START_NEXT_ROUND = 'START_NEXT_ROUND';\n\nexport const SET_WHO_SELECTING = 'SET_WHO_SELECTING';\n\nexport const ADD_POINT_TO_PLAYER = 'ADD_POINT_TO_PLAYER';\nexport const ADD_POINT_TO_COMPUTER = 'ADD_POINT_TO_COMPUTER';\n\n// For player reducer\n\nexport const PLAYER_WON_ROUND = 'PLAYER_WON_ROUND';\nexport const SET_PLAYER_UNIT = 'SET_PLAYER_UNIT';\n\n// For computer reducer\n\nexport const COMPUTER_WON_ROUND = 'COMPUTER_WON_ROUND';\nexport const SET_COMPUTER_UNIT = 'SET_COMPUTER_UNIT';\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { restartGame } from '../redux/actions/game';\n\nfunction Home() {\n  const history = useHistory();\n\n  const handleStartGame = () => {\n    history.push('/game');\n  };\n\n  React.useEffect(() => {\n    restartGame();\n  }, []);\n\n  return (\n    <div>\n      <button onClick={handleStartGame}>Start game</button>\n    </div>\n  );\n}\n\nexport default Home;\n","import { Archer, Cavalry, Pikeman } from '../constants';\nimport { UnitType } from '../types';\n\ninterface GameEngine {\n  units: UnitType[];\n\n  //   initialize: () => void;\n  //   setPreferredUnit: () => void;\n  getRandomUnit: () => UnitType;\n  checkRoundWinner: (playerUnit: UnitType, computerUnit: UnitType) => string;\n  checkGameWinner: (playerScore: number, computerScore: number) => string;\n}\n\nconst gameEngine: GameEngine = {\n  units: [Pikeman, Archer, Cavalry],\n\n  //   initialize: function() {\n  //     this.setPreferredUnit();\n  //   },\n\n  getRandomUnit: function() {\n    const randIndex = Math.floor(Math.random() * this.units.length);\n    return this.units[randIndex];\n  },\n\n  //   setPreferredUnit: function() {\n  //     this.units.push(this.getRandomUnit());\n  //   },\n\n  checkRoundWinner: (playerUnit, computerUnit) => {\n    if (playerUnit === Archer) {\n      if (computerUnit === Pikeman) {\n        return 'Player';\n      } else if (computerUnit === Cavalry) {\n        return 'Computer';\n      } else if (computerUnit === Archer) {\n        return 'Draw';\n      }\n    } else if (playerUnit === Cavalry) {\n      if (computerUnit === Archer) {\n        return 'Player';\n      } else if (computerUnit === Pikeman) {\n        return 'Computer';\n      } else if (computerUnit === Cavalry) {\n        return 'Draw';\n      }\n    } else if (playerUnit === Pikeman) {\n      if (computerUnit === Cavalry) {\n        return 'Player';\n      } else if (computerUnit === Archer) {\n        return 'Computer';\n      } else if (computerUnit === Pikeman) {\n        return 'Draw';\n      }\n    }\n    return 'Error';\n  },\n  checkGameWinner: (playerScore, computerScore) => {\n    if (playerScore > computerScore) {\n      return 'Player';\n    } else if (computerScore > playerScore) {\n      return 'Computer';\n    } else return 'Draw';\n  },\n};\n\nexport default gameEngine;\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\n\nimport { RootReducer } from '../redux/reducers/rootReducer';\nimport { getComputerScore, getPlayerScore, isGameStarted } from '../redux/selectors';\n\nimport gameEngine from '../redux/services/gameEngine';\n\ninterface Props {\n  playerScore: number;\n  computerScore: number;\n  started: boolean;\n}\n\nconst Score: FC<Props> = ({ playerScore, computerScore, started }) => {\n  return (\n    <>\n      <div className=\"score\">\n        <p>Player</p>\n        <h1>\n          {playerScore}:{computerScore}\n        </h1>\n        <p>Computer</p>\n      </div>\n      {!started ? (\n        <div className=\"game-winner\">Winner: {gameEngine.checkGameWinner(playerScore, computerScore)}</div>\n      ) : null}\n    </>\n  );\n};\n\nexport const mapStateToProps = (state: RootReducer) => {\n  return {\n    started: isGameStarted(state),\n    computerScore: getComputerScore(state),\n    playerScore: getPlayerScore(state),\n  };\n};\n\nexport const mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Score);\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\n\nimport { getComputerUnit, getGameRounds, getPlayerUnit } from '../redux/selectors';\nimport { setWhoSelecting, startNextRound, addPointToPlayer, addPointToComputer, gameOver } from '../redux/actions/game';\n\nimport { GameMemberType, UnitType, Winner } from '../redux/types';\nimport { Computer, Draw, Player } from '../redux/constants';\n\nimport { RootReducer } from '../redux/reducers/rootReducer';\nimport { setComputerUnit } from '../redux/actions/computer';\n\nimport gameEngine from '../redux/services/gameEngine';\n\ninterface Props {\n  playerUnit: UnitType;\n  computerUnit: UnitType;\n  gameRounds: number;\n  setComputerUnit: (unit: UnitType) => void;\n  startNextRound: () => void;\n  setWhoSelecting: (gameMember: GameMemberType) => void;\n  addPointToPlayer: (points: number) => void;\n  addPointToComputer: (points: number) => void;\n  gameOver: () => void;\n}\n\nconst Round: FC<Props> = ({\n  gameRounds,\n  playerUnit,\n  computerUnit,\n  setComputerUnit,\n  startNextRound,\n  setWhoSelecting,\n  addPointToPlayer,\n  addPointToComputer,\n  gameOver,\n}) => {\n  const roundWinner = gameEngine.checkRoundWinner(playerUnit, computerUnit);\n\n  const addPointTo = (roundWinner: Winner) => {\n    if (roundWinner === Player) {\n      addPointToPlayer(1);\n      addPointToComputer(-1);\n    } else if (roundWinner === Computer) {\n      addPointToComputer(1);\n      addPointToPlayer(-1);\n    } else if (roundWinner === Draw) {\n      addPointToPlayer(1);\n      addPointToComputer(1);\n    }\n  };\n\n  const handleStartNextRound = () => {\n    addPointTo(roundWinner);\n    startNextRound();\n\n    if (gameRounds + 1 < 20) {\n      setWhoSelecting(Player);\n    } else {\n      gameOver();\n    }\n  };\n\n  React.useEffect(() => {\n    setComputerUnit(gameEngine.getRandomUnit());\n  }, [setComputerUnit]);\n\n  return (\n    <div className=\"round-container\">\n      <div className=\"round-units\">\n        <div className=\"round-unit\">\n          <p className=\"unit-type\">Player: {playerUnit}</p>\n        </div>\n        <div className=\"round-unit\">\n          <p className=\"unit-type\">Computer: {computerUnit}</p>\n        </div>\n      </div>\n      <div className=\"round-results\">Round winner: {roundWinner}</div>\n      <button className=\"btn-next-round\" onClick={handleStartNextRound}>\n        {'-->'}\n      </button>\n    </div>\n  );\n};\n\nexport const mapStateToProps = (state: RootReducer) => {\n  return {\n    computerUnit: getComputerUnit(state),\n    playerUnit: getPlayerUnit(state),\n    gameRounds: getGameRounds(state),\n  };\n};\n\nexport const mapDispatchToProps = {\n  setComputerUnit,\n  setWhoSelecting,\n  startNextRound,\n  addPointToPlayer,\n  addPointToComputer,\n  gameOver,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Round);\n","import { ActionCreator } from 'redux';\n\nimport { SET_COMPUTER_UNIT } from '../constants';\nimport { IComputerSetUnitAction } from '../interfaces';\nimport { UnitType } from '../types';\n\nexport const setComputerUnit: ActionCreator<IComputerSetUnitAction> = (type: UnitType) => ({\n  type: SET_COMPUTER_UNIT,\n  payload: type,\n});\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\n\nimport { RootReducer } from '../redux/reducers/rootReducer';\nimport { setPlayerUnit } from '../redux/actions/player';\n\nimport { IUnit } from '../redux/interfaces';\nimport { GameMemberType, UnitType } from '../redux/types';\nimport { setWhoSelecting } from '../redux/actions/game';\nimport { Computer } from '../redux/constants';\n\ninterface Props {\n  items: IUnit[];\n  setPlayerUnit: (type: UnitType) => void;\n  setWhoSelecting: (gameMember: GameMemberType) => void;\n}\n\nconst UnitsList: FC<Props> = ({ items, setPlayerUnit, setWhoSelecting }) => {\n  const handleUnitSelect = (type: UnitType) => {\n    setPlayerUnit(type);\n    setWhoSelecting(Computer);\n  };\n\n  return (\n    <ul className=\"units-list\">\n      {items.length !== 0\n        ? items.map((item) => {\n            return (\n              <li key={item.id} className=\"units-list-item\">\n                <p className=\"unit-type\">{item.type}</p>\n                <img onClick={() => handleUnitSelect(item.type)} className=\"unit-image\" src={item.image} alt=\"\" />\n              </li>\n            );\n          })\n        : null}\n    </ul>\n  );\n};\n\nexport const mapStateToProps = (state: RootReducer) => {\n  return {};\n};\n\nexport const mapDispatchToProps = {\n  setPlayerUnit,\n  setWhoSelecting,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UnitsList);\n","import { ActionCreator } from 'redux';\n\nimport { IPlayerSetUnitAction } from '../interfaces';\nimport { UnitType } from '../types';\nimport { SET_PLAYER_UNIT } from '../constants';\n\nexport const setPlayerUnit: ActionCreator<IPlayerSetUnitAction> = (type: UnitType) => ({\n  type: SET_PLAYER_UNIT,\n  payload: type,\n});\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\n\nimport cavalryImg from '../assets/cavalry.png';\nimport archerImg from '../assets/archer.png';\nimport pikemanImg from '../assets/spearman.png';\n\nimport { RootReducer } from '../redux/reducers/rootReducer';\nimport { startGameAction, restartGame } from '../redux/actions/game';\nimport { getWhoSelecting, isGameStarted } from '../redux/selectors';\n\nimport { IUnit } from '../redux/interfaces';\nimport { GameMemberType } from '../redux/types';\nimport { Cavalry, Archer, Pikeman, Player, Computer } from '../redux/constants';\n\nimport { Score, Round, UnitsList } from '../components';\n\ninterface Props {\n  started: boolean;\n  whoIsSelecting: GameMemberType;\n\n  onStart: () => void;\n  restartGame: () => void;\n}\n\nconst Game: FC<Props> = ({ started, whoIsSelecting, onStart, restartGame }) => {\n  const units: IUnit[] = [\n    { id: 0, type: Cavalry, image: cavalryImg },\n    { id: 1, type: Archer, image: archerImg },\n    { id: 2, type: Pikeman, image: pikemanImg },\n  ];\n\n  React.useEffect(() => {\n    onStart();\n  }, [onStart]);\n\n  return (\n    <div>\n      <Score />\n\n      {started && whoIsSelecting === Player ? (\n        <>\n          <p className=\"title\">Choose unit</p>\n          <UnitsList items={units} />\n        </>\n      ) : started && whoIsSelecting === Computer ? (\n        <Round />\n      ) : null}\n\n      <button onClick={restartGame} className=\"btn-restart\">\n        Restart\n      </button>\n    </div>\n  );\n};\n\nexport const mapStateToProps = (state: RootReducer) => {\n  return {\n    started: isGameStarted(state),\n    whoIsSelecting: getWhoSelecting(state),\n  };\n};\n\nexport const mapDispatchToProps = {\n  onStart: startGameAction,\n  restartGame,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","import React from 'react';\n\nfunction Results() {\n  return <div>Results</div>;\n}\n\nexport default Results;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Switch, Route } from 'react-router-dom';\n\nimport { isAppStarted } from './redux/selectors';\nimport { appStartAction } from './redux/actions/app';\n\nimport './App.css';\nimport { RootReducer } from './redux/reducers/rootReducer';\nimport { Home, Game, Results } from './pages';\n\nexport interface Props {\n  started: boolean;\n  onStart: () => void;\n}\n\nexport const AppRoot: React.FC<Props> = ({ started, onStart }) => {\n  React.useEffect(() => {\n    onStart();\n  }, [onStart]);\n\n  if (!started) {\n    return <span className=\"loading\">Loading...</span>;\n  }\n\n  return (\n    <div className=\"app\">\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/game\" component={Game} />\n        <Route exact path=\"/results\" component={Results} />\n      </Switch>\n    </div>\n  );\n};\n\nexport const mapStateToProps = (state: RootReducer) => {\n  return {\n    started: isAppStarted(state),\n  };\n};\n\nexport const mapDispatchToProps = {\n  onStart: appStartAction,\n};\n\nconst App = connect(mapStateToProps, mapDispatchToProps)(AppRoot);\nexport default App;\n","import { ActionCreator } from 'redux';\nimport { IAppStartAction } from '../interfaces';\nimport { APP_START } from '../constants';\n\nexport const appStartAction: ActionCreator<IAppStartAction> = () => ({\n  type: APP_START,\n});\n","import { Action } from 'redux';\nimport { AppActions } from '../types';\nimport { IAppState } from '../interfaces';\nimport { APP_START } from '../constants';\n\nexport const initialState: IAppState = {\n  started: false,\n};\n\nexport default function appReducer(state: IAppState = initialState, action: AppActions | Action) {\n  switch (action.type) {\n    case APP_START:\n      return {\n        ...state,\n        started: true,\n      };\n\n    default:\n      return state;\n  }\n}\n","import { Action } from 'redux';\n\nimport { GameActions } from '../types';\nimport { IGameState } from '../interfaces';\nimport {\n  ADD_POINT_TO_COMPUTER,\n  ADD_POINT_TO_PLAYER,\n  GAME_OVER,\n  GAME_RESTART,\n  GAME_START,\n  Player,\n  SET_WHO_SELECTING,\n  START_NEXT_ROUND,\n} from '../constants';\n\nexport const initialState: IGameState = {\n  started: false,\n  playerScore: 0,\n  computerScore: 0,\n  currentRound: 1,\n  whoSelecting: Player,\n};\n\nexport default function gameReducer(state: IGameState = initialState, action: GameActions | Action) {\n  switch (action.type) {\n    case GAME_START:\n      return {\n        ...state,\n        started: true,\n      };\n\n    case GAME_OVER:\n      return {\n        ...state,\n        started: false,\n      };\n\n    case GAME_RESTART:\n      return {\n        ...state,\n        ...initialState,\n        started: true,\n      };\n\n    case START_NEXT_ROUND:\n      return {\n        ...state,\n        currentRound: state.currentRound + 1,\n      };\n\n    case SET_WHO_SELECTING:\n      return {\n        ...state,\n        whoSelecting: action.payload,\n      };\n\n    case ADD_POINT_TO_PLAYER:\n      return {\n        ...state,\n        playerScore: state.playerScore + action.payload,\n      };\n\n    case ADD_POINT_TO_COMPUTER:\n      return {\n        ...state,\n        computerScore: state.computerScore + action.payload,\n      };\n\n    default:\n      return state;\n  }\n}\n","import { Action } from 'redux';\n\nimport { PlayerActions } from '../types';\nimport { IPlayerState } from '../interfaces';\nimport { SET_PLAYER_UNIT } from '../constants';\n\nexport const initialState: IPlayerState = {\n  unit: null,\n};\n\nexport default function playerReducer(state: IPlayerState = initialState, action: PlayerActions | Action) {\n  switch (action.type) {\n    case SET_PLAYER_UNIT:\n      return {\n        ...state,\n        unit: action.payload,\n      };\n\n    default:\n      return state;\n  }\n}\n","import { Action } from 'redux';\n\nimport { ComputerActions } from '../types';\nimport { IComputerState } from '../interfaces';\nimport { SET_COMPUTER_UNIT } from '../constants';\n\nexport const initialState: IComputerState = {\n  unit: null,\n};\n\nexport default function computerReducer(state: IComputerState = initialState, action: ComputerActions | Action) {\n  switch (action.type) {\n    case SET_COMPUTER_UNIT:\n      return {\n        ...state,\n        unit: action.payload,\n      };\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\n\nimport { IAppState, IComputerState, IGameState, IPlayerState } from '../interfaces';\nimport { gameReducer, appReducer, playerReducer, computerReducer } from './';\n\nexport interface RootReducer {\n  app: IAppState;\n  game: IGameState;\n  player: IPlayerState;\n  computer: IComputerState;\n}\n\nconst rootReducer = combineReducers<RootReducer>({\n  app: appReducer,\n  game: gameReducer,\n  player: playerReducer,\n  computer: computerReducer,\n});\n\nexport default rootReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\nimport App from './App';\nimport getStore from './redux/store';\n\nconst store = getStore();\n\nReactDOM.render(\n  <Router basename=\"/challenge-mini-game\">\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { applyMiddleware, createStore, Store } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport rootReducer, { RootReducer } from './reducers/rootReducer';\n\nexport type ReduxStore = Store<RootReducer>;\n\nexport default function getStore(): ReduxStore {\n  const store = createStore(rootReducer, composeWithDevTools(applyMiddleware()));\n  return store;\n}\n"],"sourceRoot":""}